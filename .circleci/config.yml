version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.2.5

jobs:
  build:

    docker:
      - image: cimg/python:3.10.5-node
        environment:
          PGUSER: postgres
          PGHOST: localhost
          PGPORT: 5432
          PGDATABASE: bpp
          DJANGO_BPP_SECRET_KEY: foobar
          DJANGO_SETTINGS_MODULE: django_bpp.settings.test
      - image: mpasternak79/cimg-postgres:14
        environment:
          POSTGRESS_PASSWORD: password
          POSTGRES_HOST_AUTH_METHOD: trust
      - image: cimg/redis:6.0

    steps:

      - run:
          name: install postgresql-client
          command: |
            sudo apt install -y postgresql-client

      - run:
          name: Install Pango for WeasyPrint
          command: |
            sudo apt update
            sudo apt install pango1.0-tests

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

      - run:
          name: Wait for db
          command: dockerize -wait tcp://$PGHOST:$PGPORT -timeout 1m

      - run:
          name: create database
          command: |
            set | grep PG
            createdb bpp

      - checkout

      - restore_cache:
          key: cache-14-{{ checksum "poetry.lock" }}-{{ checksum "yarn.lock" }}

      - run: sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
      - run: wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
      - run: sudo apt -q -q -q update
      - run: sudo apt-get --quiet install -y --quiet postgresql-client-14
      - run: sudo apt --quiet install -y --quiet gettext locales
      - run: sudo sed -i 's/^# *\(pl_PL.UTF-8\)/\1/' /etc/locale.gen
      - run: sudo locale-gen
      - run: sudo sh -c 'LANG=pl_PL.UTF-8 > /etc/default/locale'
      - run: export LC_ALL=pl_PL.UTF-8
      - run: locale
      - run: sudo npm install -g grunt-cli

      - run:
          name: Install project
          command: |
            poetry install --no-root --no-ansi --verbose

      - run:
          name: Show installed packages
          command: |
            poetry run pip list

      - run:
          name: migrate database
          command: |
            poetry run src/manage.py migrate

      - run:
          name: make assets
          command: |
            poetry run make assets

      - run:
          name: debug -- show cache content
          command: |
            ls -las /home/circleci/.cache
            ls -las /home/circleci/.cache/*poetry*/

      - save_cache:
          key: cache-14-{{ checksum "poetry.lock" }}-{{ checksum "yarn.lock" }}
          paths:
            - "/home/circleci/.cache"

      # Stworz dump bazy danych na potrzeby kolejnych krokÃ³w
      - run:
          name: dump database
          command: |
            pg_dump bpp > pg_dump.sql

      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    docker:
      - image: cimg/python:3.10.5-browsers
        environment:
          PGUSER: postgres
          PGHOST: localhost
          PGPORT: 5432
          PGDATABASE: bpp
          DJANGO_BPP_SECRET_KEY: foobar
          DJANGO_SETTINGS_MODULE: django_bpp.settings.test
      - image: mpasternak79/cimg-postgres:12
        environment:
          POSTGRESS_PASSWORD: password
          POSTGRES_HOST_AUTH_METHOD: trust
      - image: redis:latest

    parallelism: 8
    steps:

      - browser-tools/install-browser-tools

      - run:
          command: |
            firefox --version
            geckodriver --version

      - attach_workspace:
          at: .

      - run:
          name: install postgresql-client
          command: |
            sudo apt install -y postgresql-client


      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

      - run:
          name: Wait for db
          command: dockerize -wait tcp://$PGHOST:$PGPORT -timeout 1m

      - restore_cache:
          key: cache-14-{{ checksum "poetry.lock" }}-{{ checksum "yarn.lock" }}

      - run:
          name: restore database from dump
          command: |
            createdb test_bpp
            cat pg_dump.sql | psql test_bpp

      - run:
          name: Install project
          command: |
            poetry install --no-root --no-ansi --verbose

      - run:
          name: Show installed packages
          command: |
            poetry run pip list

      - run:
          name: pytest
          command: |
            mkdir -p test-results
            poetry run pytest --splinter-headless --cov=src --ds=django_bpp.settings.test --verbose --junitxml=test-results/junit.xml `circleci tests glob "src/**/test_*.py" | circleci tests split --split-by=timings`

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

      - run:
           name: Submit coverage to coveralls.io
           command: |
             poetry run coveralls


  js-tests:
    docker:
      - image: cimg/python:3.10.5-node

    steps:

      - attach_workspace:
          at: .

      - run: sudo npm install -g grunt-cli

      # Testy JavaScript
      - run:
          name: JS Tests
          command: |
            make yarn
            make js-tests


workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - js-tests:
          requires:
            - build
