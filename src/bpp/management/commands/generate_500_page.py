from datetime import datetime
from pathlib import Path

from django.core.management import BaseCommand
from django.template import loader
from django.test import RequestFactory
from htmlmin.minify import html_minify

from django.contrib.auth.models import AnonymousUser

from bpp.context_processors.config import bpp_configuration
from bpp.context_processors.global_nav import user as global_nav_user
from bpp.context_processors.google_analytics import google_analytics
from bpp.context_processors.microsoft_auth import microsoft_auth_status
from bpp.context_processors.testing import testing
from bpp.context_processors.uczelnia import BRAK_UCZELNI
from bpp.models.struktura import Uczelnia


class Command(BaseCommand):
    help = "Generuje statyczny plik 500.html dla nginx"

    def handle(self, *args, **options):
        # Create fake request with anonymous user
        factory = RequestFactory()
        request = factory.get("/")
        request.user = AnonymousUser()
        request.session = {}

        # Get uczelnia or use default
        try:
            u = Uczelnia.objects.first()
            uczelnia_context = {"uczelnia": u} if u else BRAK_UCZELNI
        except Exception:
            uczelnia_context = BRAK_UCZELNI

        # Build context from all context processors
        context = {}
        context.update(uczelnia_context)
        context.update(bpp_configuration(request))
        context.update(global_nav_user(request))
        context.update(google_analytics(request))
        context.update(microsoft_auth_status(request))
        context.update(testing(request))

        # Add any additional required context
        context["messages"] = []
        context["password_change_required"] = False

        # Set cookielaw to accepted to avoid showing cookie banner on 500 page
        context["cookielaw"] = {"notset": False, "accepted": True, "rejected": False}

        # Render the template
        template = loader.get_template("50x.html")
        rendered_html = template.render(context, request)

        # Add JavaScript to remove login menu from the rendered page
        cleanup_script = """
<script type="text/javascript">
    // Remove login, raporty and ewaluacja menus from 500 error page (added by generate_500_page command)
    $(document).ready(function() {
        // Remove login menu entry that contains "zaloguj" text
        $('a:contains("zaloguj")').closest('li').remove();
        // Remove raporty menu entry that contains "raporty" text
        $('a:contains("raporty")').closest('li').remove();
        // Remove ewaluacja menu entry that contains "ewaluacja" text
        $('a:contains("ewaluacja")').closest('li').remove();
    });
</script>
"""
        # Insert the script before </body> tag
        rendered_html = rendered_html.replace("</body>", cleanup_script + "</body>")

        # Add warning comment at the top
        warning = f"""<!--
This file was automatically generated by: python src/manage.py generate_500_page
Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

WARNING: DO NOT EDIT THIS FILE MANUALLY!
This file is auto-generated and any manual changes will be lost when regenerated.
To modify this page, edit src/bpp/templates/50x.html and run the generate_500_page command again.
-->
"""
        final_html = warning + rendered_html

        # Minify HTML to remove unnecessary whitespace
        final_html = html_minify(final_html, ignore_comments=False)

        # Save to bpp app's static directory
        # Find bpp app directory by going up from this file's location
        bpp_app_dir = Path(__file__).parent.parent.parent
        output_path = bpp_app_dir / "static" / "500.html"
        output_path.parent.mkdir(parents=True, exist_ok=True)
        output_path.write_text(final_html, encoding="utf-8")

        self.stdout.write(
            self.style.SUCCESS(f"Successfully generated 500.html at {output_path}")
        )
