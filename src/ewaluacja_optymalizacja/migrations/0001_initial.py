# Generated by Django 4.2.25 on 2025-10-20 05:13

import bpp.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("bpp", "0392_alter_autor_dyscyplina_rodzaj_autora"),
        ("ewaluacja_common", "0004_alter_rodzaj_autora_options"),
    ]

    operations = [
        migrations.CreateModel(
            name="OptimizationAuthorResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_points",
                    models.DecimalField(
                        decimal_places=4,
                        default=0,
                        max_digits=20,
                        verbose_name="Suma punktów",
                    ),
                ),
                (
                    "total_slots",
                    models.DecimalField(
                        decimal_places=4,
                        default=0,
                        max_digits=20,
                        verbose_name="Suma slotów",
                    ),
                ),
                (
                    "mono_slots",
                    models.DecimalField(
                        decimal_places=4,
                        default=0,
                        max_digits=20,
                        verbose_name="Sloty monografii",
                    ),
                ),
                (
                    "slot_limit_total",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=20,
                        verbose_name="Limit slotów (ogółem)",
                    ),
                ),
                (
                    "slot_limit_mono",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=20,
                        verbose_name="Limit slotów (monografie)",
                    ),
                ),
                (
                    "autor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bpp.autor",
                        verbose_name="Autor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wynik autora w optymalizacji",
                "verbose_name_plural": "Wyniki autorów w optymalizacji",
                "ordering": ["optimization_run", "autor__nazwisko", "autor__imiona"],
            },
        ),
        migrations.CreateModel(
            name="OptimizationRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Rozpoczęto"),
                ),
                (
                    "finished_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Zakończono"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="running",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "total_points",
                    models.DecimalField(
                        decimal_places=4,
                        default=0,
                        max_digits=20,
                        verbose_name="Suma punktów",
                    ),
                ),
                (
                    "total_slots",
                    models.DecimalField(
                        decimal_places=4,
                        default=0,
                        max_digits=20,
                        verbose_name="Suma slotów",
                    ),
                ),
                (
                    "total_publications",
                    models.IntegerField(default=0, verbose_name="Liczba publikacji"),
                ),
                (
                    "low_mono_count",
                    models.IntegerField(
                        default=0, verbose_name="Liczba nisko punktowanych monografii"
                    ),
                ),
                (
                    "low_mono_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        verbose_name="Procent nisko punktowanych monografii",
                    ),
                ),
                (
                    "validation_passed",
                    models.BooleanField(
                        default=True, verbose_name="Walidacja przeszła pomyślnie"
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, default="", verbose_name="Notatki"),
                ),
                (
                    "dyscyplina_naukowa",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bpp.dyscyplina_naukowa",
                        verbose_name="Dyscyplina naukowa",
                    ),
                ),
                (
                    "uczelnia",
                    models.ForeignKey(
                        blank=True,
                        help_text="Uczelnia dla której wykonano optymalizację (opcjonalne dla pojedynczych dyscyplin)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bpp.uczelnia",
                        verbose_name="Uczelnia",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wynik optymalizacji",
                "verbose_name_plural": "Wyniki optymalizacji",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="OptimizationPublication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rekord_id",
                    bpp.models.fields.TupleField(
                        base_field=models.IntegerField(),
                        db_index=True,
                        size=2,
                        verbose_name="ID rekordu (content_type_id, object_id)",
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        choices=[("article", "Artykuł"), ("monography", "Monografia")],
                        max_length=20,
                        verbose_name="Rodzaj",
                    ),
                ),
                (
                    "points",
                    models.DecimalField(
                        decimal_places=4, max_digits=20, verbose_name="Punkty"
                    ),
                ),
                (
                    "slots",
                    models.DecimalField(
                        decimal_places=4, max_digits=20, verbose_name="Sloty"
                    ),
                ),
                (
                    "is_low_mono",
                    models.BooleanField(
                        default=False,
                        verbose_name="Nisko punktowana monografia (< 200 pkt)",
                    ),
                ),
                (
                    "author_count",
                    models.IntegerField(
                        default=1,
                        verbose_name="Liczba autorów z przypiętymi dyscyplinami",
                    ),
                ),
                (
                    "author_result",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="publications",
                        to="ewaluacja_optymalizacja.optimizationauthorresult",
                        verbose_name="Wynik autora",
                    ),
                ),
            ],
            options={
                "verbose_name": "Publikacja w optymalizacji",
                "verbose_name_plural": "Publikacje w optymalizacji",
                "ordering": ["author_result", "-points"],
            },
        ),
        migrations.AddField(
            model_name="optimizationauthorresult",
            name="optimization_run",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="author_results",
                to="ewaluacja_optymalizacja.optimizationrun",
                verbose_name="Wynik optymalizacji",
            ),
        ),
        migrations.AddField(
            model_name="optimizationauthorresult",
            name="rodzaj_autora",
            field=models.ForeignKey(
                blank=True,
                help_text="Określa czy autor jest w liczbie N",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="ewaluacja_common.rodzaj_autora",
                verbose_name="Rodzaj autora",
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationrun",
            index=models.Index(
                fields=["-started_at"], name="ewaluacja_o_started_10cc4b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationrun",
            index=models.Index(
                fields=["dyscyplina_naukowa", "-started_at"],
                name="ewaluacja_o_dyscypl_615f55_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationrun",
            index=models.Index(fields=["status"], name="ewaluacja_o_status_05e8df_idx"),
        ),
        migrations.AddIndex(
            model_name="optimizationpublication",
            index=models.Index(
                fields=["author_result"], name="ewaluacja_o_author__f2e9a2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationpublication",
            index=models.Index(
                fields=["rekord_id"], name="ewaluacja_o_rekord__f6f179_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationauthorresult",
            index=models.Index(
                fields=["optimization_run", "autor"],
                name="ewaluacja_o_optimiz_c0f633_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationauthorresult",
            index=models.Index(fields=["autor"], name="ewaluacja_o_autor_i_7cf1ed_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="optimizationauthorresult",
            unique_together={("optimization_run", "autor")},
        ),
    ]
