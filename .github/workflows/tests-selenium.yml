name: Testy - Selenium

on:
  push:
    branches:
      - dev
      - master
      - feature/*
  pull_request:
    branches:
      - dev

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:

    runs-on: ubuntu-latest
    timeout-minutes: 45  # Add job-level timeout

    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12,]

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: iplweb/bpp_dbserver:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
        ports:
          - 5433:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "pg_isready --username=postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-selenium-${{ hashFiles('.github/workflows/tests-selenium.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-selenium-
          ${{ runner.os }}-apt-

    - name: Cache Yarn dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/yarn
          node_modules
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: System setup and dependencies
      timeout-minutes: 10
      run: |
        set -e  # Exit on any error
        uname -a
        sudo apt update
        sudo apt install software-properties-common gettext
        sudo add-apt-repository -d -y -n ppa:mozillateam/ppa
        sudo add-apt-repository -d -y -n ppa:deadsnakes/ppa
        echo '
        Package: *
        Pin: origin packages.mozilla.org
        Pin-Priority: 1000

        Package: firefox*
        Pin: release o=Ubuntu
        Pin-Priority: -1' | sudo tee /etc/apt/preferences.d/mozilla
        curl -fsSL https://deb.nodesource.com/setup_current.x | sudo bash -
        # Install Firefox dependencies and tools
        sudo apt update
        sudo apt install -y python3 python3-dev libpq-dev nodejs redis-tools \
          xvfb libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 \
          libnss3 libxss1 xauth xfonts-cyrillic \
          xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable \
          firefox firefox-geckodriver
        sudo npm install -g --force yarn grunt-cli

    - name: Install poetry via pip
      timeout-minutes: 10
      run: |
        python -m pip install pip poetry

    - name: Set up Python with Poetry caching
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'poetry'

    - name: Install Python deps via poetry
      timeout-minutes: 10
      run: |
        poetry install --with=dev

    - name: Build assets (yarn, collectstatic)
      timeout-minutes: 10
      env:
        DJANGO_BPP_DB_HOST: 127.0.0.1
        DJANGO_BPP_DB_PORT: 5433
        DJANGO_BPP_DB_USER: postgres
      run: |
        poetry run make assets

    - name: Wait for services
      timeout-minutes: 2
      run: |
        # Wait for PostgreSQL to be ready
        until pg_isready -h 127.0.0.1 -p 5433 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        # Wait for Redis to be ready
        until redis-cli -h 127.0.0.1 -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done

    - name: Tests -- only Selenium
      timeout-minutes: 45
      env:
        DJANGO_BPP_DB_HOST: 127.0.0.1
        DJANGO_BPP_DB_PORT: 5433
        DJANGO_BPP_DB_USER: postgres
        # Set Firefox preferences for better stability in CI
        MOZ_HEADLESS: 1
        MOZ_ENABLE_WAYLAND: 0
        # Disable Firefox crash reporter and telemetry
        MOZ_CRASHREPORTER_DISABLE: 1
        MOZ_DATA_REPORTING: 0
        MOZ_TELEMETRY_REPORTING: 0
      run: |
        # Show Firefox version for debugging
        firefox --version
        geckodriver --version

        # Test that Firefox can start in headless mode
        timeout 10 firefox --headless --screenshot /tmp/test.png https://example.com || true
        echo "Firefox headless test completed"

        # Run tests with more verbose output and retry flaky tests
        poetry run pytest  \
          --timeout=600 \
          --verbose \
          --tb=short \
          -m "selenium" \
          --splinter-headless \
          --maxfail=3 \
          --splinter-make-screenshot-on-failure=false \
          --splinter-screenshot-dir=splintershots \
          --reruns 2 \
          --reruns-delay 5
