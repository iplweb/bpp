name: Testy - Selenium

on:
  push:
    branches:
      - dev
      - master
      - feature/*
  pull_request:
    branches:
      - dev

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Skip this job if it's a "Merge tag" commit on the dev branch
  skip-check:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" && "${{ contains(github.event.head_commit.message, 'Merge tag') }}" == "true" ]]; then
            echo "should-run=false" >> "$GITHUB_OUTPUT"
          else
            echo "should-run=true" >> "$GITHUB_OUTPUT"
          fi

  # Parallel job: Build assets once for all test jobs
  build-assets:
    needs: skip-check
    if: needs.skip-check.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: iplweb/bpp_dbserver:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready --username=postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup system dependencies
      uses: ./.github/actions/setup-system-deps
      with:
        install-firefox: 'false'

    - name: Setup Python environment
      uses: ./.github/actions/setup-python-env

    - name: Setup and build frontend
      uses: ./.github/actions/setup-frontend
      env:
        DJANGO_BPP_DB_HOST: 127.0.0.1
        DJANGO_BPP_DB_PORT: 5433
        DJANGO_BPP_DB_USER: postgres

    - name: Upload built assets
      uses: actions/upload-artifact@v4
      with:
        name: frontend-assets
        path: |
          staticroot/
          src/bpp/static/bpp/js/bpp.js
          src/bpp/static/bpp/css/
        retention-days: 1

  # Collect test files for sharding
  collect-tests:
    needs: skip-check
    if: needs.skip-check.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    outputs:
      test-groups: ${{ steps.collect.outputs.groups }}
    steps:
    - uses: actions/checkout@v4

    - name: Setup Python environment
      uses: ./.github/actions/setup-python-env

    - name: Collect and group Selenium tests
      id: collect
      run: |
        # Collect all Selenium test files and split into groups
        # This creates balanced test groups for parallel execution
        python -c "
        import json
        import subprocess
        import os

        # Get all test files with selenium marker
        result = subprocess.run(
            ['uv', 'run', 'pytest', '--collect-only', '-q', '-m', 'selenium'],
            capture_output=True, text=True, cwd='.'
        )

        # Parse test files from output
        test_files = set()
        for line in result.stdout.split('\n'):
            if '::test_' in line:
                # Extract file path
                file_path = line.split('::')[0]
                if file_path:
                    test_files.add(file_path)

        # Group tests into shards (aim for 3-4 groups)
        test_list = sorted(test_files)
        num_shards = min(4, max(1, len(test_list)))

        if num_shards == 1:
            groups = [{'id': 1, 'name': 'all-tests', 'tests': 'selenium'}]
        else:
            groups = []
            for i in range(num_shards):
                shard_tests = test_list[i::num_shards]
                if shard_tests:
                    groups.append({
                        'id': i + 1,
                        'name': f'shard-{i+1}',
                        'tests': ' '.join(shard_tests)
                    })

        # If no specific test files found, create one group to run all selenium tests
        if not groups:
            groups = [{'id': 1, 'name': 'all-tests', 'tests': 'selenium'}]

        print(f'groups={json.dumps(groups)}')
        " >> "$GITHUB_OUTPUT"

  # Main test execution - runs in parallel across shards
  test-selenium:
    needs: [skip-check, build-assets, collect-tests]
    if: needs.skip-check.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        test-group: ${{ fromJSON(needs.collect-tests.outputs.test-groups) }}
        python-version: [3.12]

    name: Selenium Tests - ${{ matrix.test-group.name }}

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: iplweb/bpp_dbserver:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready --username=postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup system dependencies with Firefox
      uses: ./.github/actions/setup-system-deps
      with:
        install-firefox: 'true'

    - name: Setup Python environment
      uses: ./.github/actions/setup-python-env
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download built assets
      uses: actions/download-artifact@v4
      with:
        name: frontend-assets
        path: .

    - name: Wait for services
      timeout-minutes: 2
      run: |
        # Wait for PostgreSQL to be ready
        until pg_isready -h 127.0.0.1 -p 5433 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        # Wait for Redis to be ready
        until redis-cli -h 127.0.0.1 -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done

    - name: Verify Firefox setup
      timeout-minutes: 1
      run: |
        firefox --version
        geckodriver --version
        # Quick headless test
        timeout 10 firefox --headless --screenshot /tmp/test.png https://example.com || true

    - name: Run Selenium tests - ${{ matrix.test-group.name }}
      timeout-minutes: 25
      env:
        DJANGO_BPP_DB_HOST: 127.0.0.1
        DJANGO_BPP_DB_PORT: 5433
        DJANGO_BPP_DB_USER: postgres
        MOZ_HEADLESS: 1
        MOZ_ENABLE_WAYLAND: 0
        MOZ_CRASHREPORTER_DISABLE: 1
        MOZ_DATA_REPORTING: 0
        MOZ_TELEMETRY_REPORTING: 0
      run: |
        echo "Running test group: ${{ matrix.test-group.name }}"

        # If tests is 'selenium', run with marker, otherwise run specific files
        if [[ "${{ matrix.test-group.tests }}" == "selenium" ]]; then
          uv run pytest \
            --timeout=600 \
            --verbose \
            --tb=short \
            -m "selenium" \
            --splinter-headless \
            --maxfail=3 \
            --splinter-make-screenshot-on-failure=false \
            --splinter-screenshot-dir=splintershots \
            --reruns 2 \
            --reruns-delay 5
        else
          uv run pytest \
            --timeout=600 \
            --verbose \
            --tb=short \
            ${{ matrix.test-group.tests }} \
            --splinter-headless \
            --maxfail=3 \
            --splinter-make-screenshot-on-failure=false \
            --splinter-screenshot-dir=splintershots \
            --reruns 2 \
            --reruns-delay 5
        fi

    - name: Upload test screenshots on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: selenium-screenshots-${{ matrix.test-group.name }}-${{ matrix.python-version }}
        path: splintershots/
        retention-days: 7
