name: Docker - Direct Build and Push

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to Docker Hub'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_VERSION: "202510.1245"
  REGISTRY: docker.io
  DOCKER_NAMESPACE: iplweb

jobs:
  # First job: Prepare assets and get version
  prepare-assets:
    name: Build Frontend Assets
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep 'DOCKER_VERSION=' Makefile | cut -d'"' -f2)
          echo "Version extracted: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-assets-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-assets-
            ${{ runner.os }}-uv-

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext

      - name: Install UV
        run: |
          python -m pip install --upgrade pip uv

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Node dependencies
        run: |
          npm install -g yarn grunt-cli
          export PUPPETEER_SKIP_CHROME_DOWNLOAD=true PUPPETEER_SKIP_CHROME_HEADLESS_SHELL_DOWNLOAD=true
          yarn install --no-progress --emoji false -s

      - name: Sync Python dependencies
        run: |
          uv sync

      - name: Build assets
        run: |
          uv run make assets
        env:
          DJANGO_SETTINGS_MODULE: django_bpp.settings.local

      - name: Upload assets artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-assets
          path: |
            src/bpp/static/scss/*.css
            src/bpp/static/scss/*.map
            src/*/locale/**/*.mo
            node_modules/
          retention-days: 1

  # Build base image first (critical dependency)
  build-base:
    name: Build Base Image
    runs-on: ubuntu-latest
    needs: prepare-assets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download assets
        uses: actions/download-artifact@v4
        with:
          name: frontend-assets

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Docker Hub
        if: github.event_name == 'push' || github.event.inputs.push_images == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy/bpp_base/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' || github.event.inputs.push_images == 'true' }}
          tags: |
            ${{ env.DOCKER_NAMESPACE }}/bpp_base:${{ needs.prepare-assets.outputs.version }}
            ${{ env.DOCKER_NAMESPACE }}/bpp_base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.prepare-assets.outputs.version }}

  # Build independent images in parallel
  build-independent:
    name: Build ${{ matrix.image }} Image
    runs-on: ubuntu-latest
    needs: prepare-assets
    strategy:
      matrix:
        include:
          - image: dbserver
            context: deploy/dbserver
            dockerfile: deploy/dbserver/Dockerfile
          - image: webserver
            context: deploy/webserver
            dockerfile: deploy/webserver/Dockerfile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Docker Hub
        if: github.event_name == 'push' || github.event.inputs.push_images == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push ${{ matrix.image }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' || github.event.inputs.push_images == 'true' }}
          tags: |
            ${{ env.DOCKER_NAMESPACE }}/bpp_${{ matrix.image }}:${{ needs.prepare-assets.outputs.version }}
            ${{ env.DOCKER_NAMESPACE }}/bpp_${{ matrix.image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.prepare-assets.outputs.version }}

  # Build images that depend on base
  build-dependent:
    name: Build ${{ matrix.image }} Image
    runs-on: ubuntu-latest
    needs: [prepare-assets, build-base]
    strategy:
      matrix:
        include:
          - image: appserver
            context: .
            dockerfile: deploy/appserver/Dockerfile
          - image: workerserver
            context: .
            dockerfile: deploy/workerserver/Dockerfile
          - image: beatserver
            context: .
            dockerfile: deploy/beatserver/Dockerfile
          - image: flower
            context: .
            dockerfile: deploy/flower/Dockerfile
            tag_prefix: ""  # flower doesn't use bpp_ prefix
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Docker Hub
        if: github.event_name == 'push' || github.event.inputs.push_images == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine image name
        id: image_name
        run: |
          if [ "${{ matrix.image }}" = "flower" ]; then
            echo "name=flower" >> $GITHUB_OUTPUT
          else
            echo "name=bpp_${{ matrix.image }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push ${{ matrix.image }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' || github.event.inputs.push_images == 'true' }}
          tags: |
            ${{ env.DOCKER_NAMESPACE }}/${{ steps.image_name.outputs.name }}:${{ needs.prepare-assets.outputs.version }}
            ${{ env.DOCKER_NAMESPACE }}/${{ steps.image_name.outputs.name }}:latest
          build-args: |
            BASE_IMAGE=${{ env.DOCKER_NAMESPACE }}/bpp_base:${{ needs.prepare-assets.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.prepare-assets.outputs.version }}

  # Summary job
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [prepare-assets, build-base, build-independent, build-dependent]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Built" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| bpp_base | ${{ needs.build-base.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| bpp_dbserver | ${{ needs.build-independent.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| bpp_webserver | ${{ needs.build-independent.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| bpp_appserver | ${{ needs.build-dependent.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| bpp_workerserver | ${{ needs.build-dependent.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| bpp_beatserver | ${{ needs.build-dependent.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| flower | ${{ needs.build-dependent.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare-assets.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: Docker Hub (iplweb)" >> $GITHUB_STEP_SUMMARY
          echo "- **Push**: ${{ github.event_name == 'push' || github.event.inputs.push_images == 'true' }}" >> $GITHUB_STEP_SUMMARY

      - name: Check build status
        if: |
          needs.prepare-assets.result != 'success' ||
          needs.build-base.result != 'success' ||
          needs.build-independent.result != 'success' ||
          needs.build-dependent.result != 'success'
        run: |
          echo "One or more Docker builds failed!"
          exit 1
