
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    location @proxy_to_app {
        proxy_pass http://dockerhost:8080;
        
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Host $server_name;
        proxy_set_header  X-Real-IP $remote_addr;
        proxy_set_header  X-Scheme $scheme;
        proxy_set_header  Host $http_host;
        
        proxy_redirect    off;
    }

    # the /auth location will send a subrequest to Django each time someone wants
    # to subscribe to a nginx-push-stream channel (see /ws/ location definition below)
    location = /auth {
        internal;

        proxy_pass http://dockerhost:8080;
        
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Cookie $http_cookie;
    }

    location /channels-stats {
        # activate channels statistics mode for this location
        push_stream_channels_statistics;
        
        # query string based channel id
        push_stream_channels_path               $arg_id;
    }	
    
    location /pub {
        # activate publisher (admin) mode for this location
        push_stream_publisher admin;
        
        # query string based channel id
        push_stream_channels_path               $arg_id;
    }

    location ~ /sub/(.*) {
        # activate subscriber (streaming) mode for this location
        push_stream_subscriber;
        
        # positional channel path
        push_stream_channels_path                   $1;
    }

    location ~ /ws/(.*) {

        # auth_request directive requires auth_request module in nginx (mpasternak)
        auth_request                                /auth;

        push_stream_subscriber websocket;
        push_stream_channels_path                   $1;
        push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":~text~, \"time\":\"~time~\", \"eventid\":\"~event-id~\"}";

        push_stream_websocket_allow_publish         off;
        push_stream_ping_message_interval           15s;
    }

    # You can use eventsource too. For demo purposes, we disable that (mpasternak)

    # location ~ /ev/(.*) {
    #     push_stream_subscriber                      eventsource;
    #     push_stream_channels_path                   $1;
    #     push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":~text~}";
    # }

    # SSL configuration
    #
    # listen 443 ssl default_server;
    # listen [::]:443 ssl default_server;
    #
    # Note: You should disable gzip for SSL traffic.
    # See: https://bugs.debian.org/773332
    #
    # Read up on ssl_ciphers to ensure a secure configuration.
    # See: https://bugs.debian.org/765782
    #
    # Self signed certs generated by the ssl-cert package
    # Don't use them in a production server!
    #
    # include snippets/snakeoil.conf;

    root /var/www/html;

    # Add index.php to the list if you are using PHP
    index index.html index.htm index.nginx-debian.html;

    server_name _;

   # setup root location as a proxy to django application
    location / {
        try_files $uri @proxy_to_app;
    }
}
