# Docker Compose configuration with Let's Encrypt SSL certificate management
# This configuration provides automatic SSL certificate acquisition and renewal
#
# Usage:
# 1. Copy .env.docker to .env and configure SITE_NAME and ADMIN_EMAIL
# 2. Run: docker-compose -f docker-compose.ssl.yml up -d
# 3. Certificates will be obtained automatically on first run
# 4. For renewal, run: docker-compose -f docker-compose.ssl.yml restart certbot
#
# Important: This configuration assumes you have DNS properly configured
# pointing to this server for the domain specified in SITE_NAME

# Logging configuration for production use
x-logging:
  &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"
    tag: "{{.Name}}/{{.ID}}"

services:
  # Ofelia - cron scheduler for containers
  ofelia:
    image: mcuadros/ofelia:latest
    restart: always
    env_file: .env.docker
    depends_on:
      - appserver
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    logging: *default-logging
    labels:
      # SSL certificate renewal - run weekly on Sunday at 2am
      ofelia.job-run.certbot-renew.schedule: "0 0 2 * * 0"
      ofelia.job-run.certbot-renew.container: "certbot"

  db:
    image: iplweb/bpp_dbserver:latest
    restart: always
    logging: *default-logging
    volumes:
      - postgresql_data:/var/lib/postgresql/data

  celerybeat:
    image: iplweb/bpp_beatserver:latest
    env_file: .env.docker
    restart: always
    logging: *default-logging
    volumes:
      - staticfiles:/staticroot
      - media:/mediaroot
    depends_on:
      - redis
      - appserver

  appserver:
    image: iplweb/bpp_appserver:latest
    restart: always
    env_file: .env.docker
    logging: *default-logging
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - staticfiles:/staticroot
      - media:/mediaroot
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.denorm_rebuild.schedule: "0 0 22 * * *"
      ofelia.job-exec.denorm_rebuild.command: "python src/manage.py denorm_rebuild --no-flush"
      ofelia.job-exec.refresh_sitemap.schedule: "0 30 1 * * *"
      ofelia.job-exec.refresh_sitemap.command: "python src/manage.py refresh_sitemap -v0"
      ofelia.job-exec.rebuild_kolejnosc.schedule: "0 30 3 * * *"
      ofelia.job-exec.rebuild_kolejnosc.command: "python src/manage.py rebuild_kolejnosc"
      ofelia.job-exec.rebuild_autor_jednostka.schedule: "0 30 4 * * *"
      ofelia.job-exec.rebuild_autor_jednostka.command: "python src/manage.py rebuild_autor_jednostka"
      ofelia.job-exec.pbn_integrator.schedule: "0 30 21 * * 6"
      ofelia.job-exec.pbn_integrator.command: "python src/manage.py tee pbn_integrator --enable-all --disable-multiprocessing"

  workerserver-general:
    image: iplweb/bpp_workerserver:latest
    env_file: .env.docker
    command: worker -Q celery
    logging: *default-logging
    restart: always
    volumes:
      - staticfiles:/staticroot
      - media:/mediaroot
    depends_on:
      appserver:
        condition: service_healthy

  workerserver-denorm:
    image: iplweb/bpp_workerserver:latest
    env_file: .env.docker
    command: worker -Q denorm
    logging: *default-logging
    restart: always
    volumes:
      - staticfiles:/staticroot
      - media:/mediaroot
    depends_on:
      appserver:
        condition: service_healthy

  denorm-queue:
    image: iplweb/bpp_base:latest
    env_file: .env.docker
    entrypoint: ["python", "src/manage.py", "denorm_queue"]
    logging: *default-logging
    healthcheck:
      test: ['CMD','true']
    restart: always
    depends_on:
      workerserver-denorm:
        condition: service_healthy

  # HTTP webserver for Let's Encrypt ACME challenge
  webserver_http:
    image: nginx:alpine
    restart: always
    logging: *default-logging
    ports:
      - "80:80"
    volumes:
      - ./deploy/nginx_http.conf:/etc/nginx/nginx.conf:ro
      - web-root:/var/www/html
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost || exit 1"]
      start_period: 20s
      interval: 60m
      timeout: 1s
      retries: 3
    profiles: ['ssl-init', 'default']

  # Certbot for SSL certificate management
  certbot:
    image: certbot/certbot:latest
    volumes:
      - web-root:/var/www/html
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      webserver_http:
        condition: service_healthy
    restart: on-failure:5
    env_file: .env.docker
    entrypoint: >
      sh -c "
      if [ ! -f /etc/letsencrypt/live/certyfikaty_ssl/fullchain.pem ]; then
        echo 'Obtaining initial certificate...'
        certbot certonly
          --non-interactive
          --webroot
          --webroot-path=/var/www/html
          --email $${ADMIN_EMAIL}
          --agree-tos
          --no-eff-email
          -d $${SITE_NAME}
          --cert-name certyfikaty_ssl;
      else
        echo 'Renewing existing certificate...'
        certbot renew --cert-name certyfikaty_ssl;
      fi
      "
    profiles: ['ssl-init', 'default']

  # HTTPS webserver (runs after SSL certificates are obtained)
  webserver_https:
    image: nginx:alpine
    restart: always
    logging: *default-logging
    depends_on:
      appserver:
        condition: service_healthy
    ports:
      - "443:443"
      - "80:80"  # Also handle HTTP for redirect to HTTPS
    volumes:
      - ./deploy/nginx_https.conf:/etc/nginx/nginx.conf:ro
      - staticfiles:/var/www/html/staticroot
      - media:/var/www/html/mediaroot
      - web-root:/var/www/html
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider https://localhost --no-check-certificate || exit 1"]
      start_period: 20s
      interval: 60m
      timeout: 1s
      retries: 3
    profiles: ['default']

  redis:
    image: redis:latest
    restart: always
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - redis_data:/data

volumes:
  staticfiles:
  media:
  postgresql_data:
  redis_data:
  web-root:        # Web root for ACME challenges
  certbot-etc:     # Let's Encrypt certificates
  certbot-var:     # Let's Encrypt working directory
