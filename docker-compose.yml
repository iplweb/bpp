#
# Uwaga uwaga: ten docker-compose.yml to przykładowa konfiguracja uruchamiania BPP.
#
# Proszę NIE używać w produkcji -- prawdziwy serwer wymaga odpowiedniej konfiguracji,
# na bazie pliku .env.docker... ustawienia tego pliku NIE są produkcyjne (serwer w trybie
# DEBUG), zatem postawienie takiej instalacji w intra- czy ekstranecie mija się z celem.
#
# Podobnie, certyfikaty SSL nginxa.
#
#       -- mpasternak 12.06.2024
#

services:
  # Ofelia to taki cron...
  ofelia:
    image: mcuadros/ofelia:latest
    env_file: .env.docker
    depends_on:
      - appserver
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
#    labels:
#       ofelia.smtp-host:
#       ofelia.smtp-port:
#       ofelia.smtp-user:
#       ofelia.smtp-password:
#       ofelia.email-to:
#       ofelia.email-from: "Ofelia @ BPP <ofelia@bpp>"

  db:
    image: iplweb/bpp_dbserver:202407.1131
    volumes:
      - postgresql_data:/var/lib/postgresql/data

  appserver:
    image: iplweb/bpp_appserver:202407.1131
    restart: always
    env_file: .env.docker
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    volumes:
      - staticfiles:/staticroot
      - media:/mediaroot
    labels:
      ofelia.enabled: "true"

      ofelia.job-exec.denorm_rebuild.schedule: "0 0 22 * * *"
      ofelia.job-exec.denorm_rebuild.command: "python src/manage.py denorm_rebuild --no-flush"

      ofelia.job-exec.refresh_sitemap.schedule: "0 30 1 * * *"
      ofelia.job-exec.refresh_sitemap.command: "python src/manage.py refresh_sitemap -v0"

      ofelia.job-exec.rebuild_kolejnosc.schedule: "0 30 3 * * *"
      ofelia.job-exec.rebuild_kolejnosc.command: "python src/manage.py rebuild_kolejnosc"

      ofelia.job-exec.rebuild_autor_jednostka.schedule: "0 30 4 * * *"
      ofelia.job-exec.rebuild_autor_jednostka.command: "python src/manage.py rebuild_autor_jednostka"

      ofelia.job-exec.pbn_integrator.schedule: "0 30 21 * * 6"
      ofelia.job-exec.pbn_integrator.command: "python src/manage.py tee pbn_integrator --enable-all --disable-multiprocessing"

  workserver:
    image: iplweb/bpp_workerserver:202407.1131
    env_file: .env.docker
    depends_on:
      - redis
      - appserver

  denormserver:
    image: iplweb/bpp_appserver:202407.1131
    env_file: .env.docker
    entrypoint: ["python", "src/manage.py", "denorm_queue"]
#    deploy:
#      mode: replicated
#      replicas: 4
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  webserver:
    image: iplweb/bpp_webserver:202407.1131
    restart: always
    depends_on:
      - redis
      - appserver
    ports:
      - 80:80
      - 443:443
    volumes:
      - staticfiles:/var/www/html/staticroot
      - media:/mediaroot
      - ./deploy/webserver/key.pem:/etc/ssl/private/key.pem
      - ./deploy/webserver/cert.pem:/etc/ssl/private/cert.pem
#    secrets:
#      - key.pem
#      - cert.pem

  redis:
    image: redis:latest

#secrets:
#  key.pem:
#    file: ./deploy/webserver/key.pem
#  cert.pem:
#    file: ./deploy/webserver/cert.pem

volumes:
  staticfiles:
  media:
  postgresql_data:
